provider "aws" {
  region = "ap-south-1"
  
}

resource "aws_iam_role" "lambda_execu_role" {
  name = var.iam_role_name

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Action = "sts:AssumeRole",
        Effect = "Allow",
        Principal = {
          Service = "lambda.amazonaws.com"
        },
      },
    ],
  })
}


resource "aws_iam_policy" "lambda_policy" {
  name = var.iam_role_policy_name


  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Action = [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
        ],
        Resource = "arn:aws:logs:ap-south-1:471112791735:log-group:*"
      },
      {
        Sid    = "Statement1",
        Effect = "Allow",
        Action = [
          "lambda:*"
        ],
        Resource = "*"
      },
      {
        Effect = "Allow",
        Action = [
          "secretsmanager:ListSecrets",
          "secretsmanager:DescribeSecret",
          "secretsmanager:PutResourcePolicy",
          "secretsmanager:*",
          "secretsmanager:UpdateSecret"
        ],
        Resource = ["arn:aws:secretsmanager:ap-south-1:471112791735:secret:hanu_sn-iBJsoo"]
      },
      {
        Effect = "Allow",
        Action = [
          "secretsmanager:ListSecrets",
          "secretsmanager:DescribeSecret"
        ],
        Resource = ["*"]
      },
      {
        Effect = "Allow",
        Action = [
          "s3:GetObject"
        ],

        Resource = "arn:aws:s3:::${var.s3_bucket_name}/*"
      }
    ]
  })
}


resource "aws_iam_role_policy_attachment" "lambda_policy_attachment" {
  role       = aws_iam_role.lambda_execu_role.name
  policy_arn = aws_iam_policy.lambda_policy.arn
}


resource "aws_lambda_function" "my_lambda" {
  function_name = var.function_name
  s3_bucket     = var.s3_bucket_name
  s3_key        = var.s3_key
  role          = aws_iam_role.lambda_execu_role.arn
  handler       = var.handler
  runtime       = var.runtime




}
##################################################
#variables
##################################################

variable "iam_role_name" {
  type        = string
 
}

variable "iam_role_policy_name" { 
  type        = string
}

variable "aws_iam_role_policy_attachment" { 
  type        = string
}
variable "function_name" {
  type        = string
}
variable "region" {
    type = string
}
variable "account_id" {
  type        = string 
}

variable "s3_bucket_name" {
  type = string
}
variable "handler" {
  type = string
}
variable "s3_key" {
  type = string
}
variable "runtime" {
  type = string
}
variable "secret_name" {
  type = string
}



variable "tags" {
  description = "A map of tags to assign to the resources"
  type        = map(string)
  default     = {
    Environment = "Dev"
    Project     = "CloudTrailSetup"
  }
}
######################################
# modules 
####################################
provider "aws" {
    region = "ap-south-1"
   
}

module "cloudtrail" {
    source = "../modules/trail"
    iam_role_name = "lambda_execu_role"
    iam_role_policy_name = "lambda_policy01"
    s3_bucket_name = "hanu-123"
    s3_key = "lambda_sm.zip"
    account_id = "471112791735"
    region = "ap-south-1"
    aws_iam_role_policy_attachment = "aws_iam_role.lambda_execu_role.name"
    handler = "lambda.lambda_handler"
    function_name = "lambda_function"
    runtime = "python3.12"
    secret_name = "hanu_sn"
tags = {
  Environment = "Prod"
  Project     = "CloudTrailEnhancedSetup"
  Owner       = "YourName"
  Department  = "IT"
}
}




#kms_target_key_id = "aws_kms_key.a.id"
    #aws_kms_key_description = "KMS key for CloudTrail"
     # cloudtrail_name = "dev-cloudtrailtest"
    #aws_s3_bucket_policy = "aws_s3_bucket.cloudtrail_bucket.id"
    #aws_kms_alias_name = "alias/my-key-alias"
