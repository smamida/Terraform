create of lambda and uploading data from s3 to lambda and writing pythoncode for secretmanager
# Define IAM role for Lambda execution
resource "aws_iam_role" "lambda_exec_role" {
  name = "lambda_exec_role"
  
  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Action    = "sts:AssumeRole",
        Effect    = "Allow",
        Principal = {
          Service = "lambda.amazonaws.com"
        },
      },
    ],
  })
}


# Attach policies to the IAM role
resource "aws_iam_policy" "lambda_policy" {
  name        = "lambda_policy"
  description = "Policy for Lambda execution and S3 access"

  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Action = [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents",
        ],
        Effect   = "Allow",
        Resource = [aws_iam_policy.lambda_policy.arn,
                    "${aws_cloudwatch_log_group.cloudtrail_log_group.arn}:*"]
      },
      {
        Action = [
          "secretsmanager:ListSecrets",
          "secretsmanager:GetSecretValue",
          "secretsmanager:DescribeSecret",
          "secretsmanager:UpdateSecret",
          "secretsmanager:UpdateSecretVersionStage",
          "secretsmanager:GetResourcePolicy",
          "secretsmanager:PutResourcePolicy"
        ],
        Effect   = "Allow",
        Resource = ["arn:aws:iam::12345678:policy/secret_manger_policy",
                    "arn:aws:secretsmanager:*:12345678:secret:*"]
      },
      {
        Action = [
          "s3:GetObject",
          "s3:PutObject",
        ],
        Effect   = "Allow",
        Resource = ["arn:aws:s3:::hanu-12345678/*",
                  "${aws_s3_bucket.example_bucket.arn}/*"]
      },
    ],
  })
}

# Attach policy to the IAM role
resource "aws_iam_role_policy_attachment" "lambda_policy_attachment" {
  role       = aws_iam_role.lambda_exec_role.name
  policy_arn = aws_iam_policy.lambda_policy.arn
}

# Define your Lambda function
resource "aws_lambda_function" "my_lambda" {
  function_name = "my_lambda_function"
  s3_bucket     =  "hanu-12345678"
  s3_key        =  "secretmanager_v1.zip"  
  #filename       = "secretmanager_v1.zip"  
  role          =  aws_iam_role.lambda_exec_role.arn
  handler       = "secretmanager_v1.handler"
  runtime       = "python3.12"
}





----------------------------------------------------------------
lambda boto3



import boto3
import json
import logging
import os


logger = logging.getLogger()
logger.setLevel(logging.INFO)

account_no =os.getenv("Account_ID")
region_s  =os.getenv("region_name")


def check_if_secret_exist(client,secret_name):
    try:
        # Check if the secret_name exists in the response
        secrets = client.list_secrets()
        # secret_names = [secret['Name'] for secret in secrets['SecretList']]
        secret_exists = any(secret['Name'] == secret_name for secret in secrets['SecretList'])
        logger.info(f'the secret_exists{secret_exists}')
        return secret_exists
            
    except BaseException as e:
        logger.error(f"error occured during list secrets, {str(e)}")
        raise Exception(f"error occured during list secrets, {str(e)}")

def update_principles(client,secret_name,allowed_principles):
    # Describe the secret to get details
    try:
        secret_description = client.describe_secret(SecretId=secret_name)
        logger.info(f"Described secret {secret_name} successfully")
        policy = {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Deny",
                    "Principal": "*",
                    "Action": "secretsmanager:GetSecretValue",
                    "Resource": f"arn:aws:secretsmanager:{region_s}:{account_no}:secret:{secret_name}",
                    "Condition": {
                        "StringNotEquals": {
                            "aws:PrincipalArn": allowed_principles
                        }
                    }
                }
            ]
        }
        response = client.put_resource_policy(
            SecretId=secret_name,
            ResourcePolicy=json.dumps(policy)
        )
        return response
    except BaseException as e:
        print(e)
        raise Exception(f"error occured during updating policy, {str(e)}")



def lambda_handler(event, context):
    print("event",event)
    
    Secret_client = boto3.client('secretsmanager')
    #secret_name = "hanu"
    #allowed_principles ="arn:aws:iam::account_id:role/role4"
    secret_name = event.get('secret_name')
    allowed_priciples = event.get('allowed_priciples')
   # print("ab",allowed_principles)
    check_secret= check_if_secret_exist(client=Secret_client,secret_name=secret_name)
    if check_secret:
        update_policy =update_principles(Secret_client,secret_name,allowed_priciples)
        logger.info(f'update policy completed, {str(update_policy)}')
        
    else:
        logger.error(f'Error while listing the secret_name {str(check_secret)}')


------------------------------------------------------
event -test lambda
{
  "secret_name": "hanu_sn",
  "allowed_priciples": [
    "arn:aws:iam::471112791735:role/service-role/srikanth"
  ]
}
        
        



 

